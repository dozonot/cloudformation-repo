Description:
  This template biulds Auto Scaling for WordPress.

Parameters:
  WordPressEC2InstanceAMI:
    Type    : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default : "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  WordPressEC2InstanceType:
    Type    : String
    Default : t2.micro
  WordPressKeyName:
    Type    : 'AWS::EC2::KeyPair::KeyName'
  WordPressELBSecurityGroup:
    Type    : String
    Description   : Please enter VPC Security Group ID for ELB.
  WordPressAPSecurityGroup:
    Type    : String
    Description   : Please enter VPC Security Group ID for AP Server.
  WordPressEFS:
    Type    : String
    Description   : Please enter EFS ID.
  WordPressPublicSubnet1:
    Type    : String
    Description   : Please enter VPC public subnet1 for ELB.
  WordPressPublicSubnet2:
    Type    : String
    Description   : Please enter VPC public subnet2 for ELB.
  WordPressPrivateSubnet1:
    Type    : String
    Description   : Please enter VPC private subnet1 for AutoScaling.
  WordPressPrivateSubnet2:
    Type    : String
    Description   : Please enter VPC private subnet2 for AutoScaling.
  WordPressRDSDBName:
    Type    : String
    Description   : Please enter RDS database name.
  WordPressRDSMasterUser:
    Type    : String
    Description   : Please enter RDS master user account name.
  WordPressRDSMasterPassword:
    Type    : String
    Description   : Please enter RDS master user password.
  WordPressRDSEndpoint:
    Type    : String
    Description   : Please enter RDS Endpoint(FQDN only).

Resources:
  WordPressFrontELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone      : true
      HealthCheck    :
        Target             : "HTTP:80/hc.html"
        Interval           : 10
        Timeout            : 5
        HealthyThreshold   : 2
        UnhealthyThreshold : 5
      Listeners      :
        - InstancePort     : 80
          InstanceProtocol : HTTP
          LoadBalancerPort : 80
          Protocol         : HTTP
      Scheme         : internet-facing
      SecurityGroups :
        - !Ref WordPressELBSecurityGroup
      Subnets        :
        - !Ref WordPressPublicSubnet1
        - !Ref WordPressPublicSubnet2
  WordPressLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a WordPress
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd            : []
              php              : []
              php-mysql        : []
              php-mbstring     : []
              amazon-efs-utils : []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WordPressLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -s ${AWS::StackId} -r WordPressLaunchConfiguration --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            command01:
              command      : "mount -t efs ${WordPressEFS}:/ /var/www/html"
              cwd          : "/tmp"
              env          :
                WordPressEFS: !Ref WordPressEFS
            command02:
              command      : "curl -LO https://ja.wordpress.org/latest-ja.tar.gz && tar zxvf latest-ja.tar.gz"
              cwd          : "/tmp"
              test         : "test ! -e /var/www/html/index.php"
              ignoreErrors : true
            command03:
              command      : "cp -Rp /tmp/wordpress/* /var/www/html/ && chown -R apache.apache /var/www/html"
              cwd          : "/tmp"
              test         : "test -e /tmp/wordpress"
              ignoreErrors : true
            command05:
              command      : "cp -p wp-config-sample.php wp-config.php"
              cwd          : "/var/www/html/"
              test         : "test ! -e /var/www/html/wp-config.php"
            command06:
              command      : "sed -i -e s/database_name_here/${WordPressRDSDBName}/g wp-config.php"
              cwd          : "/var/www/html/"
              env          :
                WordPressRDSDBName: !Ref WordPressRDSDBName
              test         : "grep database_name_here /var/www/html/wp-config.php"
              ignoreErrors : true
            command07:
              command      : "sed -i -e s/username_here/${WordPressRDSMasterUser}/g /var/www/html/wp-config.php"
              cwd          : "/var/www/html/"
              env          :
                WordPressRDSMasterUser: !Ref WordPressRDSMasterUser
              test         : "grep username_here /var/www/html/wp-config.php"
              ignoreErrors : true
            command08:
              command      : "sed -i -e s/password_here/${WordPressRDSMasterPassword}/g /var/www/html/wp-config.php"
              cwd          : "/var/www/html/"
              env          :
                WordPressRDSMasterPassword: !Ref WordPressRDSMasterPassword
              test         : "grep password_here /var/www/html/wp-config.php"
              ignoreErrors : true
            command09:
              command      : "sed -i -e s/localhost/${WordPressRDSEndpoint}/g /var/www/html/wp-config.php"
              cwd          : "/var/www/html/"
              env          :
                WordPressRDSEndpoint: !Ref WordPressRDSEndpoint
              test         : "grep localhost /var/www/html/wp-config.php"
              ignoreErrors : true
            command10:
              command      : "touch hc.html && chown apache.apache hc.html"
              cwd          : "/var/www/html/"
              test         : "test ! -e /var/www/html/hc.html"
              ignoreErrors : true
    Properties:
      AssociatePublicIpAddress : false
      InstanceMonitoring       : false
      InstanceType             : !Ref WordPressEC2InstanceType
      KeyName                  : !Ref WordPressKeyName
      ImageId                  : !Ref WordPressEC2InstanceAMI
      SecurityGroups           :
        - !Ref WordPressAPSecurityGroup
      SpotPrice                : "0.50"
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WordPressLaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-hup || error_exit ''Failed to start cfn-hup''
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WordPressLaunchConfiguration --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WordPressAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier       :
        - !Ref WordPressPrivateSubnet1
        - !Ref WordPressPrivateSubnet2
      HealthCheckType         : ELB
      HealthCheckGracePeriod  : 10
      LaunchConfigurationName : !Ref WordPressLaunchConfiguration
      LoadBalancerNames       :
        - !Ref WordPressFrontELB
      MaxSize                 : 2
      DesiredCapacity         : 2
      MinSize                 : 2

Outputs:
  WordPressELBURL:
    Value: 
      !Join [ "", [ "http://", !GetAtt WordPressFrontELB.DNSName ] ]
